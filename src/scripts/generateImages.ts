import * as fs from 'fs';
import * as path from 'path';

// Define the type for our image data. This is optional but good practice.
interface ImageInfo {
    src: string;
}

function readFilesRecursively(directoryPath: string): string[] {
    const allFiles: string[] = [];

    function readDirectory(currentPath: string, dir = ""): void {
        const items = fs.readdirSync(currentPath);

        for (const item of items) {
            const fullPath = path.join(currentPath, item);
            const stat = fs.statSync(fullPath);

            if (stat.isDirectory()) {
                readDirectory(fullPath, item+'/'); // Recursive call for subdirectories
            } else {
                allFiles.push(dir + item); // Add the file path to the array
            }
        }
    }

    readDirectory(directoryPath);
    return allFiles;
}

const imagesDir: string = path.join(process.cwd(), 'public/pics');
const outputFilePath: string = path.join(process.cwd(), 'src/lib/images.ts');

try {
    const filenames: string[] = readFilesRecursively(imagesDir);

    const imagePaths: ImageInfo[] = filenames
        .filter((file) => /\.(jpg|jpeg|png|gif|webp)$/i.test(file))
        .map((file) => ({
            src: `/pics/${file}`,
        }));

    const content: string = `// This file is auto-generated by a build script. Do not edit directly.
        export const allImages: { src: string }[] = ${JSON.stringify(imagePaths, null, 2)};
        `;

    fs.writeFileSync(outputFilePath, content, 'utf8');
    console.log('Successfully generated image paths file.');
} catch (error) {
    console.error('Error generating image paths file:', error);
}